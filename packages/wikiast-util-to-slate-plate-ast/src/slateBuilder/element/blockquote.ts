/**
 * This is an example of custom element processing. The logic here is the same as `src/transform/wikiast-util-to-slate-plate-ast/slateBuilder/element/index.ts`, purely for example.
 */
import { type TElement, TNode } from '@udecode/slate';
import type { IDomParseTreeNode } from 'tiddlywiki';
import { isText } from 'wikiast-utils';
import type { IContext } from '../..';
import { convertNodes } from '../../traverse';

/**
 * Merge multiple text child with `\n`, make them a single text child
 */
export function mergeSiblingTexts<T extends TNode>(node: T): T {
  return {
    ...node,
    children: (node.children as TNode[]).reduce<TNode[]>((accumulator, child) => {
      const lastChild = accumulator.at(-1);
      // if two children are text nodes, merge them
      if (isText(child)) {
        if (isText(lastChild)) {
          return [...accumulator.slice(0, -1), { text: lastChild.text + '\n' + child.text }];
        }
        return [...accumulator, child];
      }
      // if new child is not a text node, recursive
      return [...accumulator, mergeSiblingTexts(child)];
    }, []),
  };
}

export function blockquote(context: IContext, node: IDomParseTreeNode): TElement {
  // unwrap div generated by wiki parser
  const children = convertNodes(context, node.children).flatMap((child) => {
    if (child.type === 'div') {
      return child.children as TElement[];
    }
    return [child];
  });
  const result = {
    type: node.tag,
    children,
  };
  return mergeSiblingTexts(result as TElement);
}
